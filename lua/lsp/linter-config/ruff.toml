# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]


# Same as Black.
line-length = 88
indent-width = 4

#  ╭──────────────────────────────────────────────────────────╮
#  │                           LINT                           │
#  ╰──────────────────────────────────────────────────────────╯

[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["ALL"] # ["E", "F"]
ignore = [
    "S",
#  ╾───────────────────────────────────────────────────────────────────────────────────╼
    "E501",   #`E501` (line length violations).
    "E741",   # (Do not use variables named 'I', 'O', or 'l').
    "E731",   # rewrite lambda as def
    "ERA001", # Found commented-out code
    "T201",   # print found
    "B023",   # Function definition does not bind loop variable `erwin_item`
#  ╾───────────────────────────────────────────────────────────────────────────────────╼
    "A001",   # Variable `dir` is shadowing a Python builtin
    "A002",   # Function argument `input` is shadowing a Python builtin
#  ╾───────────────────────────────────────────────────────────────────────────────────╼
    "ANN201", # Missing return type annotation
    "ANN202", # Missing return type annotation for private function
    "ANN204", # Missing return type annotation for special method `__init__`
    "ANN205", # Missing return type annotation for staticmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `f`
    "UP007",  # Use `X | Y` for type annotations
    "RET503", # Missing explicit `return` at the end of function able to return non-`None` value
    "TC001",  # Move import into a type-checking block
    "TC003",  # Move standard library import foo into a type-checking block
    "TID252", # Prefer absolute imports over relative imports from parent modules
#  ╾───────────────────────────────────────────────────────────────────────────────────╼
    "D100",   # Missing docstring in public module 1:1:1 Ruff D100
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in `__init__`
    "D202",   # No blank lines allowed after function docstring
    "D415",   # First line should end with a period, question mark, or exclamation point
    "D212",   # Multi-line docstring summary should start at the first line 35:5:74 Ruff
#  ╾───────────────────────────────────────────────────────────────────────────────────╼
    "RET502", # Do not implicitly `return None` in function able to return non-`None` value
    "RET504", # Unnecessary assignment  before `return` statement
#  ╾───────────────────────────────────────────────────────────────────────────────────╼
    "INP001", # File `foo.py` is part of an implicit namespace package. Add an `__init__.py`
    "I001",   # Import block is un-sorted or un-formatted
    "B006",   # Do not use mutable data structures for argument defaults
    "FA100",  # Add `from __future__ import annotations` to simplify `typing.Optional`

    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "TRY003", # Avoid specifying long messages outside the exception class
    "BLE001", # Do not catch blind exception
    "B904",   # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling

    "PTH123", # `open()` should be replaced by `Path.open()`
    "G004",   # Logging statement uses f-string

    "PLW2901",# `for` loop variable `overwritten by assignment target
    "COM812", # Trailing comma missing
    # "COM819",
    # "D203",
    # "D213",
    # "D300",
    # "E111",
    # "E114",
    # "E117",
    # "ISC001",
    # "ISC002",
    # "Q000",
    # "Q001",
    # "Q002",
    # "Q003",
    # "W191",
    # "PD002",   # inplace=True
    # "C408",    # Unnecessary dict call
    # "E402",
    # "UP035",
    # "TCH001",
    # "TCH002",
    # "PLR0913",
    # "FIX002",  # Line contains TODO, consider resolving the issue
    # "TD002",   # Missing author in TODO;
    # "TD003",   # Missing issue link on the line following this TODO
    # "S101",    # Use of `assert` detected

]


# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

#  ╭──────────────────────────────────────────────────────────╮
#  │                          FORMAT                          │
#  ╰──────────────────────────────────────────────────────────╯
[format]
quote-style = "double" # double quotes for strings.
skip-magic-trailing-comma = false # respect magic trailing commas.
line-ending = "auto" # automatically detect the appropriate line ending.

# Exclude a variety of commonly ignored directories.

[lint.pydocstyle]
convention = "google"
